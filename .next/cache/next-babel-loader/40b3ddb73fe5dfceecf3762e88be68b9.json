{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport { Typography } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: '0%',\n    marginRight: '50%',\n    marginLeft: '50%'\n  },\n  defInput: {\n    width: '368px',\n    height: '307px',\n    backgroundColor: '#F0F4F8',\n    borderRadius: '8px',\n    opacity: '1'\n  },\n  preview: {\n    width: '105px',\n    height: '25px',\n    background: '#202020 0% 0% no-repeat padding-box',\n    borderRadius: '80px',\n    opacity: '1',\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: 'auto',\n    marginTop: '5%'\n  },\n  termInput: {\n    opacity: '1',\n    marginBottom: '5%'\n  },\n  btn: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25)\n    },\n    width: '100%',\n    justifyContent: 'center',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto'\n    },\n    textPrimary: {\n      color: 'white'\n    }\n  }\n}));\nexport default function addwordform(props) {\n  const classes = useStyles();\n  const {\n    0: ispreview,\n    1: setPreview\n  } = useState(false);\n  const {\n    0: all,\n    1: setAll\n  } = useState({\n    word: \"\",\n    definition: \"\"\n  });\n\n  const sendPreview = e => {\n    e.preventDefault();\n    setPreview(true);\n  };\n\n  async function addWord(e) {\n    e.preventDefault();\n    props.returnData(all);\n  }\n\n  const cancelPreview = e => {\n    e.preventDefault();\n    setPreview(false);\n  };\n\n  const edit = e => {\n    e.preventDefault();\n    setPreview(false);\n  };\n\n  useEffect(() => {\n    if (props.clear == true) {\n      clear();\n    }\n  }, [props.clear]);\n\n  function clear() {\n    setAll({\n      word: \"\",\n      definition: \"\"\n    });\n  }\n\n  return __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    m: 20\n  }, ispreview == false ? __jsx(React.Fragment, null, __jsx(TextField, {\n    name: \"word\",\n    variant: \"outlined\",\n    value: all.word,\n    fullWidth: true,\n    className: classes.termInput,\n    onChange: e => setAll(_objectSpread(_objectSpread({}, all), {}, {\n      [event.target.name]: event.target.value\n    })),\n    label: \"Word\"\n  }), __jsx(TextField, {\n    name: \"definition\",\n    variant: \"outlined\",\n    classNam: classes.defInput,\n    value: all.definition,\n    onChange: e => setAll(_objectSpread(_objectSpread({}, all), {}, {\n      [event.target.name]: event.target.value\n    })),\n    multiline: true,\n    rows: 10,\n    label: \"Definition\"\n  }), __jsx(Button, {\n    variant: \"outlined\",\n    className: classes.preview,\n    onClick: sendPreview\n  }, __jsx(Typography, {\n    style: {\n      color: 'white'\n    }\n  }, \"Preview\"))) : __jsx(Box, null, __jsx(Typography, null, \"word:   \", all.word, \"definition: \", all.definition, __jsx(Button, {\n    className: classes.btn,\n    variant: \"outlined\",\n    onClick: addWord\n  }, \"add\"), __jsx(Button, {\n    className: classes.btn,\n    variant: \"outlined\",\n    onClick: cancelPreview\n  }, \"cancel\"), __jsx(Button, {\n    className: classes.btn,\n    variant: \"outlined\",\n    onClick: edit\n  }, \"Edit\"))));\n}","map":{"version":3,"sources":["/Users/salahabdallah/Desktop/Dev/Jargon/components/add.js"],"names":["React","useState","useEffect","Button","fade","makeStyles","TextField","Container","Box","Typography","useStyles","theme","root","marginTop","marginRight","marginLeft","defInput","width","height","backgroundColor","borderRadius","opacity","preview","background","display","justifyContent","margin","termInput","marginBottom","btn","position","shape","palette","common","white","breakpoints","up","spacing","textPrimary","color","addwordform","props","classes","ispreview","setPreview","all","setAll","word","definition","sendPreview","e","preventDefault","addWord","returnData","cancelPreview","edit","clear","event","target","name","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport { Typography } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: '0%',\n    marginRight: '50%',\n    marginLeft: '50%'\n  },\n  defInput:{\n\n    width: '368px',\n    height: '307px',\n    backgroundColor: '#F0F4F8',\n    borderRadius: '8px',\n    opacity: '1'\n\n  },\n  preview:{\n\n    width: '105px',\n    height: '25px',\n    background: '#202020 0% 0% no-repeat padding-box',\n    borderRadius: '80px',\n    opacity: '1',\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin:'auto',\n    marginTop:'5%'\n\n\n  },\n  termInput:{\n\n    opacity: '1',\n    marginBottom:'5%'\n\n  },\n  btn: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    width: '100%',\n    justifyContent: 'center',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto',\n    },\n    textPrimary:{\n      color:'white'\n    }\n  }\n}));\n\nexport default function addwordform(props) {\n\n  const classes = useStyles();\n  const [ispreview, setPreview] = useState(false);\n  const [all, setAll] = useState({ word: \"\", definition: \"\" });\n\n\n  const sendPreview = (e) => {\n\n    e.preventDefault();\n    setPreview(true)\n\n  }\n\n  async function addWord(e) {\n\n    e.preventDefault();\n    props.returnData(all);\n  }\n\n  const cancelPreview = (e) => {\n\n    e.preventDefault();\n    setPreview(false)\n\n  }\n\n  const edit = (e) => {\n\n    e.preventDefault();\n    setPreview(false)\n\n  }\n\n  useEffect(() => {\n\n    if (props.clear == true) {\n      clear()\n    }\n\n  }, [props.clear])\n\n  function clear() {\n\n    setAll({ word: \"\", definition: \"\" });\n  }\n\n\n  return (\n\n    <Box display=\"flex\" \n    flexDirection= \"column\"\n    justifyContent=\"center\" \n    m={20} \n\n    >\n      {ispreview == false ?\n        <>\n          \n          <TextField    name=\"word\" \n                        variant=\"outlined\" \n                        value={all.word} \n                        fullWidth\n                        className={classes.termInput}\n                        onChange={e => setAll({ ...all, [event.target.name]: event.target.value })} label=\"Word\" />\n\n          <TextField  name=\"definition\" \n                      variant=\"outlined\" \n                      classNam={classes.defInput}\n                      value={all.definition} \n                      onChange={e => setAll({ ...all, [event.target.name]: event.target.value })} multiline rows={10} label=\"Definition\" />\n       \n          <Button variant=\"outlined\" className={classes.preview} onClick={sendPreview}  >\n          <Typography style={{color: 'white'}} >\n            Preview\n          </Typography>\n         </Button>\n\n\n        </>\n        :\n\n        <Box>\n          <Typography>\n            word:   {all.word}\n               definition: {all.definition}\n            <Button className={classes.btn} variant=\"outlined\"  onClick={addWord} >\n              add\n              </Button>\n            <Button className={classes.btn} variant=\"outlined\"  onClick={cancelPreview} >\n              cancel\n            </Button>\n            <Button className={classes.btn} variant=\"outlined\"  onClick={edit} >\n              Edit\n            </Button>\n          </Typography>\n        </Box>\n      }\n     </Box>\n  );\n}"]},"metadata":{},"sourceType":"module"}