{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useContext } from 'react';\nimport Addwordform from '../components/add';\nimport axios from 'axios';\nimport Router from 'next/router';\nimport { UserContext } from '../providers/userProvider';\nimport { useStyles } from '../utils/style';\nimport * as wordtest from '../utils/words';\nexport default function addword() {\n  _s();\n\n  var _useState = useState({\n    word: '',\n    definition: ''\n  }),\n      wordanddef = _useState[0],\n      setWordandDef = _useState[1];\n\n  var _useState2 = useState([]),\n      topics = _useState2[0],\n      setTopics = _useState2[1];\n\n  var user = useContext(UserContext);\n\n  var getData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(word) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(wordtest);\n              setWordandDef({\n                word: wordtest.word,\n                definition: wordtest.definition\n              });\n              _context.next = 4;\n              return axios.get(\"/api/add\", {\n                params: word\n              }, {\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              }).then(function (response) {\n                if (response.data.added == true) {\n                  Router.push('/congrats');\n                }\n              })[\"catch\"](function (error) {\n                console.log(error);\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getData(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getTopics = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(definition) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(definition);\n              _context2.next = 3;\n              return axios.get(\"/api/topics/\", {\n                params: definition\n              }, {\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              }).then(function (response) {\n                setTopics(response.data.result[0]);\n              })[\"catch\"](function (error) {\n                console.log(error);\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getTopics(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Addwordform, {\n    returnData: getData,\n    returnTopics: getTopics,\n    topics: topics\n  });\n}\n\n_s(addword, \"IVH77yu0WTJK5KxxOFcCzDnOICI=\");","map":{"version":3,"sources":["/Users/salahabdallah/Desktop/Dev/Jargon/pages/addword.js"],"names":["useState","useContext","Addwordform","axios","Router","UserContext","useStyles","wordtest","addword","word","definition","wordanddef","setWordandDef","topics","setTopics","user","getData","console","log","get","params","headers","then","response","data","added","push","error","getTopics","result"],"mappings":";;;;;;;AACA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAAQC,SAAR,QAAwB,gBAAxB;AACA,OAAO,KAAKC,QAAZ,MAA0B,gBAA1B;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAAA,kBAEIR,QAAQ,CAAC;AAAES,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,UAAU,EAAE;AAAxB,GAAD,CAFZ;AAAA,MAEzBC,UAFyB;AAAA,MAEbC,aAFa;;AAAA,mBAGJZ,QAAQ,CAAC,EAAD,CAHJ;AAAA,MAGzBa,MAHyB;AAAA,MAGjBC,SAHiB;;AAIhC,MAAMC,IAAI,GAAGd,UAAU,CAACI,WAAD,CAAvB;;AAEA,MAAMW,OAAO;AAAA,wEAAG,iBAAOP,IAAP;AAAA;AAAA;AAAA;AAAA;AAEdQ,cAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AACAK,cAAAA,aAAa,CAAC;AAAEH,gBAAAA,IAAI,EAAEF,QAAQ,CAACE,IAAjB;AAAuBC,gBAAAA,UAAU,EAAEH,QAAQ,CAACG;AAA5C,eAAD,CAAb;AAHc;AAAA,qBAKRP,KAAK,CAACgB,GAAN,aAAsB;AAAEC,gBAAAA,MAAM,EAAEX;AAAV,eAAtB,EAAwC;AAAEY,gBAAAA,OAAO,EAAE;AAAE,kCAAgB;AAAlB;AAAX,eAAxC,EACHC,IADG,CACE,UAAUC,QAAV,EAAoB;AAExB,oBAAIA,QAAQ,CAACC,IAAT,CAAcC,KAAd,IAAuB,IAA3B,EAAiC;AAC/BrB,kBAAAA,MAAM,CAACsB,IAAP,CAAY,WAAZ;AACD;AACF,eANG,WAOG,UAAUC,KAAV,EAAiB;AACtBV,gBAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACD,eATG,CALQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPX,OAAO;AAAA;AAAA;AAAA,KAAb;;AAiBA,MAAMY,SAAS;AAAA,yEAAE,kBAAOlB,UAAP;AAAA;AAAA;AAAA;AAAA;AACfO,cAAAA,OAAO,CAACC,GAAR,CAAYR,UAAZ;AADe;AAAA,qBAETP,KAAK,CAACgB,GAAN,iBAA0B;AAAEC,gBAAAA,MAAM,EAAEV;AAAV,eAA1B,EAAkD;AAAEW,gBAAAA,OAAO,EAAE;AAAE,kCAAgB;AAAlB;AAAX,eAAlD,EACHC,IADG,CACE,UAAUC,QAAV,EAAoB;AAExBT,gBAAAA,SAAS,CAACS,QAAQ,CAACC,IAAT,CAAcK,MAAd,CAAqB,CAArB,CAAD,CAAT;AAED,eALG,WAMG,UAAUF,KAAV,EAAiB;AACtBV,gBAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACD,eARG,CAFS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA,oBAATC,SAAS;AAAA;AAAA;AAAA,KAAf;;AAaA,SACI,MAAC,WAAD;AAAa,IAAA,UAAU,EAAEZ,OAAzB;AAAkC,IAAA,YAAY,EAAEY,SAAhD;AAA2D,IAAA,MAAM,EAAEf;AAAnE,IADJ;AAGD;;GAvCuBL,O","sourcesContent":["\nimport { useState, useContext } from 'react'\nimport Addwordform from '../components/add'\nimport axios from 'axios';\nimport Router from 'next/router';\nimport { UserContext } from '../providers/userProvider';\nimport {useStyles} from '../utils/style';\nimport * as wordtest from '../utils/words'\n\nexport default function addword() {\n\n  const [wordanddef, setWordandDef] = useState({ word: '', definition: '' });\n  const [topics, setTopics] = useState([]);\n  const user = useContext(UserContext);\n\n  const getData = async (word) => {\n\n    console.log(wordtest)\n    setWordandDef({ word: wordtest.word, definition: wordtest.definition })\n\n    await axios.get(`/api/add`, { params: word }, { headers: { 'Content-Type': 'application/json' } })\n      .then(function (response) {\n\n        if (response.data.added == true) {\n          Router.push('/congrats')\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  const getTopics= async (definition) => {\n    console.log(definition)\n    await axios.get(`/api/topics/`, { params: definition }, { headers: { 'Content-Type': 'application/json' } })\n      .then(function (response) {\n     \n        setTopics(response.data.result[0])\n\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  return (\n      <Addwordform returnData={getData} returnTopics={getTopics} topics={topics}></Addwordform>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}