{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport { Typography } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      marginTop: '0%',\n      marginRight: '50%',\n      marginLeft: '50%'\n    },\n    grid: {\n      flexGrow: 1,\n      spacing: 0,\n      direction: \"column\",\n      alignItems: \"center\",\n      justify: \"center\"\n    },\n    defInput: {\n      width: '368px',\n      height: '307px',\n      backgroundColor: '#F0F4F8',\n      borderRadius: '8px',\n      opacity: '1'\n    },\n    preview: {\n      width: '105px',\n      height: '25px',\n      background: '#202020 0% 0% no-repeat padding-box',\n      borderRadius: '80px',\n      opacity: '1',\n      display: \"flex\",\n      justifyContent: \"center\",\n      margin: 'auto',\n      marginTop: '5%'\n    },\n    card: {\n      display: 'flex'\n    },\n    termInput: {\n      opacity: '1',\n      marginBottom: '5%'\n    },\n    bullet: {\n      display: 'inline-block',\n      margin: '0 2px',\n      transform: 'scale(0.8)'\n    },\n    title: {\n      fontSize: 24\n    },\n    pos: {\n      marginBottom: 24\n    }\n  };\n});\nexport default function addwordform(props) {\n  _s();\n\n  var classes = useStyles();\n\n  var _useState = useState(false),\n      ispreview = _useState[0],\n      setPreview = _useState[1];\n\n  var _useState2 = useState({\n    word: \"\",\n    definition: \"\"\n  }),\n      all = _useState2[0],\n      setAll = _useState2[1];\n\n  var sendPreview = function sendPreview(e) {\n    e.preventDefault();\n    setPreview(true);\n  };\n\n  function addWord(_x) {\n    return _addWord.apply(this, arguments);\n  }\n\n  function _addWord() {\n    _addWord = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              props.returnData(all);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _addWord.apply(this, arguments);\n  }\n\n  var cancelPreview = function cancelPreview(e) {\n    e.preventDefault();\n    setPreview(false);\n  };\n\n  var edit = function edit(e) {\n    e.preventDefault();\n    setPreview(false);\n  };\n\n  useEffect(function () {\n    if (props.clear == true) {\n      clear();\n    }\n  }, [props.clear]);\n\n  function clear() {\n    setAll({\n      word: \"\",\n      definition: \"\"\n    });\n  }\n\n  return __jsx(React.Fragment, null, ispreview == false ? __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    m: 20\n  }, __jsx(TextField, {\n    name: \"word\",\n    variant: \"outlined\",\n    value: all.word,\n    fullWidth: true,\n    className: classes.termInput,\n    onChange: function onChange(e) {\n      return setAll(_objectSpread(_objectSpread({}, all), {}, _defineProperty({}, event.target.name, event.target.value)));\n    },\n    label: \"Word\"\n  }), __jsx(TextField, {\n    name: \"definition\",\n    variant: \"outlined\",\n    classNam: classes.defInput,\n    value: all.definition,\n    onChange: function onChange(e) {\n      return setAll(_objectSpread(_objectSpread({}, all), {}, _defineProperty({}, event.target.name, event.target.value)));\n    },\n    multiline: true,\n    rows: 10,\n    label: \"Definition\"\n  }), __jsx(Button, {\n    variant: \"outlined\",\n    className: classes.preview,\n    onClick: sendPreview\n  }, __jsx(Typography, {\n    style: {\n      color: 'white'\n    }\n  }, \"Preview\"))) : __jsx(Grid, {\n    container: true,\n    className: classes.grid\n  }, __jsx(React.Fragment, null, __jsx(Card, {\n    item: true,\n    className: classes.card\n  }, __jsx(CardContent, null, __jsx(Typography, {\n    className: classes.title,\n    color: \"textSecondary\",\n    gutterBottom: true\n  }, \"Word\"), __jsx(Typography, {\n    variant: \"h5\",\n    component: \"h2\"\n  }, all.word), __jsx(\"br\", null), __jsx(Typography, {\n    className: classes.pos,\n    color: \"textSecondary\"\n  }, \"Definition\"), __jsx(Typography, {\n    variant: \"body2\",\n    component: \"p\"\n  }, all.definition)), __jsx(CardActions, null, __jsx(Button, {\n    className: classes.preview,\n    variant: \"outlined\",\n    onClick: addWord\n  }, \"add\"), __jsx(Button, {\n    className: classes.preview,\n    variant: \"outlined\",\n    onClick: cancelPreview\n  }, \"cancel\"), __jsx(Button, {\n    className: classes.preview,\n    variant: \"outlined\",\n    onClick: edit\n  }, \"Edit\"))))));\n}\n\n_s(addwordform, \"V5jsj8ZzArWo/dsO80AtHJtetJY=\", false, function () {\n  return [useStyles];\n});","map":{"version":3,"sources":["/Users/salahabdallah/Desktop/Dev/Jargon/components/add.js"],"names":["React","useState","useEffect","Button","fade","makeStyles","TextField","Container","Box","Typography","Card","CardActions","CardContent","Grid","useStyles","theme","root","marginTop","marginRight","marginLeft","grid","flexGrow","spacing","direction","alignItems","justify","defInput","width","height","backgroundColor","borderRadius","opacity","preview","background","display","justifyContent","margin","card","termInput","marginBottom","bullet","transform","title","fontSize","pos","addwordform","props","classes","ispreview","setPreview","word","definition","all","setAll","sendPreview","e","preventDefault","addWord","returnData","cancelPreview","edit","clear","event","target","name","value","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport { Typography } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: '0%',\n    marginRight: '50%',\n    marginLeft: '50%'\n  },\n  grid: {\n    flexGrow: 1,\n    spacing:0,\n    direction:\"column\",\n    alignItems:\"center\",\n    justify:\"center\"\n  },\n  defInput: {\n\n    width: '368px',\n    height: '307px',\n    backgroundColor: '#F0F4F8',\n    borderRadius: '8px',\n    opacity: '1'\n\n  },\n  preview: {\n\n    width: '105px',\n    height: '25px',\n    background: '#202020 0% 0% no-repeat padding-box',\n    borderRadius: '80px',\n    opacity: '1',\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: 'auto',\n    marginTop: '5%'\n\n\n  },\n  card: {\n    display: 'flex'\n  },\n  termInput: {\n\n    opacity: '1',\n    marginBottom: '5%'\n\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 24,\n  },\n  pos: {\n    marginBottom: 24,\n  },\n}));\n\nexport default function addwordform(props) {\n\n  const classes = useStyles();\n  const [ispreview, setPreview] = useState(false);\n  const [all, setAll] = useState({ word: \"\", definition: \"\" });\n\n\n  const sendPreview = (e) => {\n\n    e.preventDefault();\n    setPreview(true)\n\n  }\n\n  async function addWord(e) {\n\n    e.preventDefault();\n    props.returnData(all);\n  }\n\n  const cancelPreview = (e) => {\n\n    e.preventDefault();\n    setPreview(false)\n\n  }\n\n  const edit = (e) => {\n\n    e.preventDefault();\n    setPreview(false)\n\n  }\n\n  useEffect(() => {\n\n    if (props.clear == true) {\n      clear()\n    }\n\n  }, [props.clear])\n\n  function clear() {\n\n    setAll({ word: \"\", definition: \"\" });\n  }\n\n\n  return (\n\n\n    <>\n      {ispreview == false ?\n\n        <Box display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"center\"\n          m={20}\n\n        >\n          <TextField name=\"word\"\n            variant=\"outlined\"\n            value={all.word}\n            fullWidth\n            className={classes.termInput}\n            onChange={e => setAll({ ...all, [event.target.name]: event.target.value })} label=\"Word\" />\n\n          <TextField name=\"definition\"\n            variant=\"outlined\"\n            classNam={classes.defInput}\n            value={all.definition}\n            onChange={e => setAll({ ...all, [event.target.name]: event.target.value })} multiline rows={10} label=\"Definition\" />\n\n          <Button variant=\"outlined\" className={classes.preview} onClick={sendPreview}  >\n            <Typography style={{ color: 'white' }} >\n              Preview\n          </Typography>\n          </Button>\n        </Box>\n\n        :\n        <Grid container className={classes.grid} >\n          <>\n            <Card item className={classes.card} >\n              <CardContent  >\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                  Word\n              </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                  {all.word}\n                </Typography>\n                <br />\n                <Typography className={classes.pos} color=\"textSecondary\">\n                  Definition\n              </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                  {all.definition}\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <Button className={classes.preview} variant=\"outlined\" onClick={addWord} >\n                  add\n            </Button>\n                <Button className={classes.preview} variant=\"outlined\" onClick={cancelPreview} >\n                  cancel\n          </Button>\n                <Button className={classes.preview} variant=\"outlined\" onClick={edit} >\n                  Edit\n          </Button>\n              </CardActions>\n            </Card>\n          </>\n        </Grid>\n\n      }\n    </>\n\n  );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}