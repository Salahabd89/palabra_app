{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport Appbar from '../components/appbar';\nimport Searchbar from '../components/search';\nimport Addbtn from '../components/add';\nimport react, { useEffect, useState } from 'react';\nimport { firestore } from \"../utils/firebase\";\nexport default function Home() {\n  _s();\n\n  var _useState = useState([]),\n      addedword = _useState[0],\n      setWord = _useState[1];\n\n  var _useState2 = useState(false),\n      clear = _useState2[0],\n      setClear = _useState2[1];\n\n  var getData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(word) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setWord(word);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getData(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    var shouldclear = false;\n\n    function sendtofb() {\n      return _sendtofb.apply(this, arguments);\n    }\n\n    function _sendtofb() {\n      _sendtofb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var word, isAvailable;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (addedword.length != 0 & addedword.word != \"\") {\n                  word = addedword.word;\n                  isAvailable = false;\n\n                  if (word == 'a' || word == 'b') {\n                    setClear(false); //console.log(shouldclear)\n                  } else {\n                    setClear(true); //console.log(shouldclear)\n                  }\n                  /*\n                    await firestore.collection(\"words\").doc(word).get().then(function (doc) {\n                       if (doc.exists) {\n                         isAvailable = true\n                         shouldclear = false;\n                         setClear(shouldclear)\n                         \n                         \n                       }else{\n                       shouldclear = true;\n                        setClear(shouldclear)\n                       }\n                     }).catch(function (error) {\n                       console.log(\"Error getting document:\", error);\n                     }); */\n\n                  /*\n                          if (isAvailable == false) {\n                  \n                            await firestore.collection(\"words\").doc(word).set({\n                              definition: addedword.definition,\n                              industry: \"Construction\",\n                              sub_industry: \"Construction\",\n                              user: \"Salah\",\n                              word: addedword.word\n                            })\n                              .then(function () {\n                                console.log(\"Document successfully written!\");\n                                \n                  \n                              })\n                              .catch(function (error) {\n                                console.error(\"Error writing document: \", error);\n                              })\n                          }*/\n\n                }\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return _sendtofb.apply(this, arguments);\n    }\n\n    sendtofb();\n    setWord('');\n  }, [addedword]);\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://fonts.googleapis.com/icon?family=Material+Icons\"\n  })), __jsx(\"main\", null, __jsx(Appbar, null), __jsx(Searchbar, null), __jsx(Addbtn, {\n    returnData: getData,\n    clear: clear\n  })));\n}\n\n_s(Home, \"Vpyh76YZQBOBhu2W1hl40RjUfS8=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/salahabdallah/Desktop/Dev/Jargon/pages/main.js"],"names":["Head","Appbar","Searchbar","Addbtn","react","useEffect","useState","firestore","Home","addedword","setWord","clear","setClear","getData","word","shouldclear","sendtofb","length","isAvailable"],"mappings":";;;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAGA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAAA,kBAEAF,QAAQ,CAAC,EAAD,CAFR;AAAA,MAEtBG,SAFsB;AAAA,MAEXC,OAFW;;AAAA,mBAGHJ,QAAQ,CAAC,KAAD,CAHL;AAAA,MAGtBK,KAHsB;AAAA,MAGfC,QAHe;;AAK7B,MAAMC,OAAO;AAAA,wEAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAEdJ,cAAAA,OAAO,CAACI,IAAD,CAAP;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPD,OAAO;AAAA;AAAA;AAAA,KAAb;;AAMAR,EAAAA,SAAS,CAAC,YAAM;AAEd,QAAIU,WAAW,GAAG,KAAlB;;AAFc,aAICC,QAJD;AAAA;AAAA;;AAAA;AAAA,2EAId;AAAA;AAAA;AAAA;AAAA;AAAA;AAEE,oBAAIP,SAAS,CAACQ,MAAV,IAAoB,CAApB,GAAwBR,SAAS,CAACK,IAAV,IAAkB,EAA9C,EAAkD;AAE5CA,kBAAAA,IAF4C,GAErCL,SAAS,CAACK,IAF2B;AAG5CI,kBAAAA,WAH4C,GAG9B,KAH8B;;AAKhD,sBAAIJ,IAAI,IAAI,GAAR,IAAcA,IAAI,IAAI,GAA1B,EAA8B;AAE5BF,oBAAAA,QAAQ,CAAC,KAAD,CAAR,CAF4B,CAG5B;AACD,mBAJD,MAIK;AAEFA,oBAAAA,QAAQ,CAAC,IAAD,CAAR,CAFE,CAGF;AACF;AAEJ;;;;;;;;;;;;;;;;AAiBL;;;;;;;;;;;;;;;;;;;;AAmBO;;AArDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJc;AAAA;AAAA;;AA4DdI,IAAAA,QAAQ;AAERN,IAAAA,OAAO,CAAC,EAAD,CAAP;AAGD,GAjEQ,EAiEN,CAACD,SAAD,CAjEM,CAAT;AAqEA,SACE,mBACE,MAAC,IAAD,QACE;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC;AAA5B,IADF,CADF,EAIE,oBACE,MAAC,MAAD,OADF,EAEE,MAAC,SAAD,OAFF,EAGE,MAAC,MAAD;AAAQ,IAAA,UAAU,EAAEI,OAApB;AAA6B,IAAA,KAAK,EAAIF;AAAtC,IAHF,CAJF,CADF;AAYD;;GA5FuBH,I;;KAAAA,I","sourcesContent":["import Head from 'next/head'\nimport Appbar from '../components/appbar'\nimport Searchbar from '../components/search'\nimport Addbtn from '../components/add'\nimport react, { useEffect, useState } from 'react'\nimport { firestore } from \"../utils/firebase\"\n\n\nexport default function Home() {\n\n  const [addedword, setWord] = useState([])\n  const [clear, setClear] = useState(false)\n\n  const getData = async (word) => {\n\n    setWord(word)\n\n  }\n\n  useEffect(() => {\n\n    let shouldclear = false;\n\n    async function sendtofb() {\n\n      if (addedword.length != 0 & addedword.word != \"\") {\n\n        let word = addedword.word\n        let isAvailable = false\n\n        if (word == 'a'|| word == 'b'){\n         \n          setClear(false)\n          //console.log(shouldclear)\n        }else{\n          \n           setClear(true)\n           //console.log(shouldclear)\n        }\n    \n     /*\n       await firestore.collection(\"words\").doc(word).get().then(function (doc) {\n          if (doc.exists) {\n            isAvailable = true\n            shouldclear = false;\n            setClear(shouldclear)\n            \n            \n          }else{\n          shouldclear = true;\n           setClear(shouldclear)\n          }\n        }).catch(function (error) {\n          console.log(\"Error getting document:\", error);\n        }); */\n\n        \n/*\n        if (isAvailable == false) {\n\n          await firestore.collection(\"words\").doc(word).set({\n            definition: addedword.definition,\n            industry: \"Construction\",\n            sub_industry: \"Construction\",\n            user: \"Salah\",\n            word: addedword.word\n          })\n            .then(function () {\n              console.log(\"Document successfully written!\");\n              \n\n            })\n            .catch(function (error) {\n              console.error(\"Error writing document: \", error);\n            })\n        }*/\n      }\n    }\n\n    sendtofb();\n  \n    setWord('')\n\n  \n  }, [addedword]);\n\n\n\n  return (\n    <div>\n      <Head>\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n      </Head>\n      <main>\n        <Appbar></Appbar>\n        <Searchbar></Searchbar>\n        <Addbtn returnData={getData} clear = {clear} ></Addbtn>\n      </main>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}