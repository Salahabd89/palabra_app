{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport Appbar from '../components/appbar';\nimport Searchbar from '../components/search';\nimport Addbtn from '../components/addword';\nimport react, { useEffect, useState } from 'react';\nimport { firestore } from \"../utils/firebase\";\nexport default function Home() {\n  var _useState = useState([]),\n      addedword = _useState[0],\n      setWord = _useState[1];\n\n  var _useState2 = useState(false),\n      clear = _useState2[0],\n      setClear = _useState2[1];\n\n  var getData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(word) {\n      var clear;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              clear = false;\n              setClear(clear);\n              setWord(word);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getData(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    function sendtofb() {\n      return _sendtofb.apply(this, arguments);\n    }\n\n    function _sendtofb() {\n      _sendtofb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var word, isAvailable;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(addedword.length != 0 & addedword.word != \"\")) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                word = addedword.word;\n                isAvailable = false;\n                _context2.next = 5;\n                return firestore.collection(\"words\").doc(word).get().then(function (doc) {\n                  if (doc.exists) {\n                    isAvailable = true;\n                    setClear(false);\n                  } else {\n                    var shouldclear = true;\n                    setClear(shouldclear);\n                  }\n                })[\"catch\"](function (error) {\n                  console.log(\"Error getting document:\", error);\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return _sendtofb.apply(this, arguments);\n    }\n\n    sendtofb();\n  }, [addedword]);\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://fonts.googleapis.com/icon?family=Material+Icons\"\n  })), __jsx(\"main\", null, __jsx(Appbar, null), __jsx(Searchbar, null), __jsx(Addbtn, {\n    returnData: getData,\n    clear: clear\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}